{"version":3,"sources":["redux/contacts/contacts-action.js","components/Form.js","components/СontactList.js","components/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","v4","deleteContact","changeFilter","connect","items","contacts","dispatch","onAdd","contactsActions","useState","setName","setNumber","handleInputChange","e","currentTarget","value","reset","onSubmit","preventDefault","findName","find","contact","alert","type","pattern","title","onChange","required","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","handleDelete","map","onClick","handleChange","App","className","createReducer","actions","state","_","combineReducers","ContactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c33d8667.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n  payload: {\r\n    id: v4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\n// eslint-disable-next-line\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contacts-action';\r\n\r\nfunction Form({ onAdd, items }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const findName = items.find((contact) => contact.name === name);\r\n    if (findName) {\r\n      alert(`${findName.name} is already in contacts.`);\r\n      reset();\r\n      return;\r\n    }\r\n    onAdd(name, number);\r\n    reset();\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Имя\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Телефон\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { items } }) => ({\r\n  items,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAdd: (name, number) => dispatch(contactsActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contacts-action';\r\n\r\nconst ContactList = ({ contacts, handleDelete }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button type=\"button\" onClick={() => handleDelete(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleDelete: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../redux/contacts/contacts-action';\r\n\r\nconst Filter = ({ handleChange, filter }) => (\r\n  <>\r\n    <p>Find contacts by name</p>\r\n    <input\r\n      type=\"text\"\r\n      onChange={(e) => handleChange(e.currentTarget.value)}\r\n      value={filter}\r\n    />\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = ({ contacts: { filter } }) => ({\r\n  filter: filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleChange: (value) => dispatch(contactsActions.changeFilter(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import Form from './components/Form';\nimport ContactsList from './components/СontactList';\nimport Filter from './components/Filter';\n\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Phonebook</h1>\n      </header>\n      <Form />\n      <div>\n        <h2>CONTACTS</h2>\n        <Filter />\n        <ContactsList />\n      </div>\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-action';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst ContactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(ContactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n// eslint-disable-next-line\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}